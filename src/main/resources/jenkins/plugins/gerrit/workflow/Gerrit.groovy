// Copyright (C) 2018 GerritForge Ltd
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package jenkins.plugins.gerrit.workflow

import jenkins.plugins.gerrit.GerritRestApiWrapper;
import jenkins.plugins.gerrit.GerritURI;

class Gerrit implements Serializable {
    private org.jenkinsci.plugins.workflow.cps.CpsScript script

    public Gerrit(org.jenkinsci.plugins.workflow.cps.CpsScript script) {
        this.script = script
    }

    public void review(String label = 'Verified', int score = 0, String message = "") {
        node {
            if (script.env.BRANCH_NAME ==~ /[0-9][0-9]\/[0-9]+\/[0-9]+/) {
                def sha1 = script.scm.buildChooser.revision.getSha1String()
                def changeId = script.env.BRANCH_NAME.split("/")[1]
                def notify = score < 0 ? ', "notify" : "OWNER"' : ''
                def jsonPayload = '{"labels":{"' + label + '":' + score + '},' +
                        ' "message": "' + message + '"' +
                        notify + ", ${ciTag(label)} }"
                post("/changes/" + changeId + "/revisions/" + sha1 + "/review", jsonPayload)
            } else {
                script.echo "Gerrit Review ${label} cannot be executed on branch ${script.env.BRANCH_NAME}"
            }
        }
    }

    private <V> V node(Closure<V> body) {
        if (script.env.NODE_NAME != null) {
            // Already inside a node block.
            body()
        } else {
            script.node {
                body()
            }
        }
    }

    private def post(path, jsonPayload) {
        script.scm.getUserRemoteConfigs().each {
            String cid = it.getCredentialsId()
            if(cid) {
                String rname = it.getName()
                script.withCredentials([[$class          : 'UsernamePasswordMultiBinding',
                                         credentialsId   : cid,
                                         usernameVariable: 'USERNAME',
                                         passwordVariable: 'PASSWORD']]) {
                    script.scm.getRepositories().each {
                        String name = it.getName()
                        if (it.getName() == rname) {
                            GerritRestApiWrapper gerritRestApiWrapper = GerritRestApiWrapper.builder()
                                    .logger(getBinding().out)
                                    .gerritAPIUrl(new GerritURI(it.getURIs()[0]).getApiURL())
                                    .insecureHttps(script.env.GERRIT_API_INSECURE_HTTPS)
                                    .credentials(script.USERNAME, script.PASSWORD)
                                    .build();
                            if (gerritRestApiWrapper != null) {
                                gerritRestApiWrapper.postRequest(path, jsonPayload);
                            }
                        }
                    }
                }
            } else {
                script.echo("*WARNING* NO feedback sent to Gerrit because of missing credentials for ${it.getUrl()}")
            }
        }
    }

    private def ciTag(String operation) {
        " \"tag\" : \"autogenerated:jenkins:$operation\" "
    }
}
